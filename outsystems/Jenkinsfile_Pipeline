pipeline {
    agent any

    parameters {
        string(name: 'ApplicationScope', defaultValue: 'https://cmiti-dev.outsystemsenterprise.com/', description: 'Comma-separated list of LifeTime applications to deploy.')
        string(name: 'ApplicationScopeWithTests', defaultValue: 'LOMSWEB', description: 'Comma-separated list of LifeTime applications (including tests).')
        string(name: 'TriggeredBy', defaultValue: 'Reynor Carta', description: 'Name of LifeTime user that triggered the pipeline remotely.')
    }

    options {
        skipStagesAfterUnstable()
    }

    environment {
        ArtifactsFolder = "Artifacts"
        LifeTimeHostname = 'https://cmiti-lt.outsystemsenterprise.com'
        ArchitectureDashboard = 'https://aimentorstudio.outsystems.com'
        LifeTimeAPIVersion = '2'
        AuthorizationToken = credentials('LifeTimeServiceAccountToken')
        OSPackageVersion = '0.10.1'

        MinArchitectureRating = "B"
        MaxViolations = "10"
    }

    stages {
        stage('Prepare Environment') {
            steps {
                sh "mkdir -p ${env.ArtifactsFolder}"
                sh '''
                    set -e
                    python3 -m venv venv
                    . venv/bin/activate
                    pip install --upgrade pip
                    pip install requests beautifulsoup4 PyPDF2
                    pip install outsystems-pipeline==${OSPackageVersion} requests
                '''
            }
        }

        stage('Fetch LifeTime Data') {
            steps {
                withCredentials([string(credentialsId: 'LifeTimeServiceAccountToken', variable: 'LT_TOKEN')]) {
                    sh '''
                        . venv/bin/activate
                        python3 -m outsystems.pipeline.fetch_lifetime_data \
                            --artifacts "${ArtifactsFolder}" \
                            --lt_url "${LifeTimeHostname}" \
                            --lt_token "${LT_TOKEN}" \
                            --lt_api_version "${LifeTimeAPIVersion}"
                    '''
                    sh "ls -l ${env.ArtifactsFolder}"
                }
            }
        }

        stage('Check Architectural Debt from PDF') {
            steps {
                script {
                    sh '''
                        set -e
                        echo "[INFO] Activating virtual environment..."
                        . venv/bin/activate

                        echo "[INFO] Running PDF technical debt extraction..."
                        python3 PDF/get_pdf_tech_debt.py \
                            --pdf_path "${ArtifactsFolder}/architecture-report.pdf" \
                            --output "${ArtifactsFolder}/arch-debt.json"
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: "${ArtifactsFolder}/arch-debt.json", allowEmptyArchive: true
                }
                success {
                    echo "✅ PDF technical debt extraction passed."
                }
                failure {
                    echo "❌ PDF technical debt extraction failed. Review 'arch-debt.json' for details."
                }
            }
        }
    }

    post {
        always {
            dir("${env.ArtifactsFolder}") {
                sh 'echo "Listing Artifacts folder contents:" && ls -la || true'
                archiveArtifacts artifacts: '**/*', allowEmptyArchive: true
            }
        }
        cleanup {
            dir("${env.ArtifactsFolder}") {
                deleteDir()
            }
        }
    }
}
