pipeline{
    // Replace by specific label for narrowing down to OutSystems pipeline-specific agents. A dedicated agent will be allocated for the entire pipeline run.
        agent any

    parameters {
        // Pipeline parameters are automatically filled by LT Trigger plugin
            string(name: 'ApplicationScope', defaultValue: 'https://cmiti-dev.outsystemsenterprise.com/', description: 'Comma-separated list of LifeTime applications to deploy.')
            string(name: 'ApplicationScopeWithTests', defaultValue: 'https://cmiti-tst.outsystemsenterprise.com/', description: 'Comma-separated list of LifeTime applications to deploy (including test applications)')
            string(name: 'TriggeredBy', defaultValue: 'Reynor Carta', description: 'Name of LifeTime user that triggered the pipeline remotely.')
    }

    options {
        skipStagesAfterUnstable()
    }

    environment {
        // Artifacts Folder
            ArtifactsFolder = "Artifacts"
        // LifeTime Specific Variables
           LifeTimeHostname = 'https://cmiti-lt.outsystemsenterprise.com/'
           LifeTimeAPIVersion = 2
        // Authentication Specific Variables
            AuthorizationToken = credentials('LifeTimeServiceAccountToken')

       // Environments Specification Variables
            DevelopmentEnvironment = 'https://cmiti-dev.outsystemsenterprise.com/'

       // OutSystems PyPI package version
                OSPackageVersion = '0.10.1'
    }

    stages {
        stage ('Install Python Dependencies') {
            steps {
                // Create folder for storing artifacts
                    sh script: "mkdir ${env.ArtifactsFolder}", label: 'Create artifacts folder'
                // Only the virtual environment needs to be installed at the system level
                // sh script: 'pip3 install -q -I virtualenv --user', label: 'Install Python virtual environments'
                   sh '''
                       set -e
                       apt update
                       apt install -y python3.11-venv
                       python3 -m venv venv
                       . venv/bin/activate
                       pip install virtualenv
                       echo "Installed python3.11-venv, created virtual environment and installed virtualenv"
                   '''
                // Install the rest of the dependencies at the environment level and not the system level
                     withPythonEnv('python3'){
                        sh script: "pip3 install -U outsystems-pipeline==\"${env.OSPackageVersion}\"", label: 'Install required packages'
                     }
            }
        }

        stage('Get and Deploy Latest Tags') {
          steps {
            withPythonEnv('python3') {
              echo "Pipeline run triggered remotely by '${params.TriggeredBy}' for the following applications (including tests): '${params.ApplicationScopeWithTests}'"

              // Retrieve the Applications and Environment details from LifeTime
              sh script: '''
                python3 -m outsystems.pipeline.fetch_lifetime_data \
                  --artifacts "$ArtifactsFolder" \
                  --lt_url "$LifeTimeHostname" \
                  --lt_token "$AuthorizationToken" \
                  --lt_api_version "$LifeTimeAPIVersion"
              ''',
              label: 'Retrieve list of Environments and Applications',
              environment: [
                ArtifactsFolder: env.ArtifactsFolder,
                LifeTimeHostname: env.LifeTimeHostname,
                AuthorizationToken: env.AuthorizationToken,
                LifeTimeAPIVersion: env.LifeTimeAPIVersion
              ]

              // Deploy the application list, with tests, to the Regression environment
              /*lock('deployment-plan-REG') {
                sh script: '''
                  python3 -m outsystems.pipeline.deploy_latest_tags_to_target_env \
                    --artifacts "$ArtifactsFolder" \
                    --lt_url "$LifeTimeHostname" \
                    --lt_token "$AuthorizationToken" \
                    --lt_api_version "$LifeTimeAPIVersion" \
                    --source_env "$DevelopmentEnvironment" \
                    --destination_env "$RegressionEnvironment" \
                    --app_list "$ApplicationScopeWithTests"
                ''',
                label: "Deploy latest application tags (including tests) to $RegressionEnvironment",
                environment: [
                  ArtifactsFolder: env.ArtifactsFolder,
                  LifeTimeHostname: env.LifeTimeHostname,
                  AuthorizationToken: env.AuthorizationToken,
                  LifeTimeAPIVersion: env.LifeTimeAPIVersion,
                  DevelopmentEnvironment: env.DevelopmentEnvironment,
                  RegressionEnvironment: env.RegressionEnvironment,
                  ApplicationScopeWithTests: params.ApplicationScopeWithTests
                ]
              }*/
            }
          }
        }
    }

    post {
        always {
            dir("${env.ArtifactsFolder}") {
                // Debug: list files for observability
                sh 'echo "Listing contents of ArtifactsFolder:" && ls -la || true'

                // Archive .cache files if any; don't fail if none found
                archiveArtifacts artifacts: '**/*.cache', allowEmptyArchive: true
            }
        }

        failure {
            dir("${env.ArtifactsFolder}") {
                // Archive DeploymentConflicts folder/files if exists, but don't fail if empty
                archiveArtifacts artifacts: 'DeploymentConflicts', allowEmptyArchive: true
            }
        }

        cleanup {
            dir("${env.ArtifactsFolder}") {
              // Clean up artifacts folder contents
                deleteDir()
            }
        }
    }
}