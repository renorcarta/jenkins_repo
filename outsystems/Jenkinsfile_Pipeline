pipeline {
    agent any

    parameters {
        string(name: 'ApplicationScope', defaultValue: 'https://cmiti-dev.outsystemsenterprise.com/', description: 'Comma-separated list of LifeTime applications to deploy.')
        string(name: 'ApplicationScopeWithTests', defaultValue: 'LOMSWEB', description: 'Comma-separated list of LifeTime applications (including tests).')
        string(name: 'TriggeredBy', defaultValue: 'Reynor Carta', description: 'Name of LifeTime user that triggered the pipeline remotely.')
    }

    options {
        skipStagesAfterUnstable()
    }

    environment {
        ArtifactsFolder = "Artifacts"
        LifeTimeHostname = 'https://cmiti-lt.outsystemsenterprise.com'
        ArchitectureDashboard = 'https://aimentorstudio.outsystems.com'
        LifeTimeAPIVersion = '2'
        AuthorizationToken = credentials('LifeTimeServiceAccountToken')
        OSPackageVersion = '0.10.1'
    }

    stages {
        stage('Prepare Environment') {
            steps {
                sh "mkdir -p ${env.ArtifactsFolder}"
                sh '''
                    set -e
                    python3 -m venv venv
                    . venv/bin/activate
                    pip install --upgrade pip
                    pip install requests beautifulsoup4
                    pip install outsystems-pipeline==${OSPackageVersion} requests
                '''
            }
        }

        stage('Fetch LifeTime Data') {
            steps {
                withCredentials([string(credentialsId: 'LifeTimeServiceAccountToken', variable: 'LT_TOKEN')]) {
                    sh '''
                        . venv/bin/activate
                        python3 -m outsystems.pipeline.fetch_lifetime_data \
                            --artifacts "${ArtifactsFolder}" \
                            --lt_url "${LifeTimeHostname}" \
                            --lt_token "${LT_TOKEN}" \
                            --lt_api_version "${LifeTimeAPIVersion}"
                    '''
                    sh "ls -l ${env.ArtifactsFolder}"
                }
            }
        }

        stage('Check Architectural Debt') {
            steps {
                withCredentials([string(credentialsId: 'LifeTimeServiceAccountToken', variable: 'LT_TOKEN')]) {
                    script {
                        sh '''
                            echo "[INFO] Running architectural debt analysis..."
                            . venv/bin/activate
                            mkdir -p "${ArtifactsFolder}"

                            python3 outsystems/pipeline/get_architectural_debt.py \\
                                --app_name "${ApplicationScopeWithTests}" \\
                                --artifacts "${ArtifactsFolder}" \\
                                --lifetime_host "${LifeTimeHostname}" \\
                                --arch_dashboard_host "${ArchitectureDashboard}" \\
                                --token "${LT_TOKEN}" \\
                                --output "${ArtifactsFolder}/arch-debt.json"

                            echo "[INFO] Evaluating architectural debt against thresholds..."

                            python3 -c "
        import json, sys, os
        file_path = os.path.join('${ArtifactsFolder}', 'arch-debt.json')
        with open(file_path) as f:
            data = json.load(f)
        rating = data.get('architecture_rating', '').upper()
        violations = int(data.get('total_violations', 0))
        min_rating = '${MinArchitectureRating}'.upper()
        max_violations = int('${MaxViolations}')
        rating_order = ['A','B','C','D','E','F']

        if rating not in rating_order:
            print(f'❌ Unknown rating format: {rating}')
            sys.exit(1)

        if rating_order.index(rating) > rating_order.index(min_rating) or violations > max_violations:
            print(f'❌ Failed architecture quality gate.')
            print(f'    Rating: {rating} (required minimum: {min_rating})')
            print(f'    Violations: {violations} (max allowed: {max_violations})')
            sys.exit(1)
        else:
            print(f'✅ Architecture check passed.')
            print(f'    Rating: {rating}')
            print(f'    Violations: {violations}')
        "
                        '''
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: "${ArtifactsFolder}/arch-debt.json", allowEmptyArchive: true
                }
                success {
                    echo "✅ Architectural debt check passed."
                }
                failure {
                    echo "❌ Architectural debt check failed. Review 'arch-debt.json' for details."
                }
            }
        }
    }

    post {
        always {
            dir("${env.ArtifactsFolder}") {
                sh 'echo "Listing Artifacts folder contents:" && ls -la || true'
                archiveArtifacts artifacts: '**/*', allowEmptyArchive: true
            }
        }
        cleanup {
            dir("${env.ArtifactsFolder}") {
                deleteDir()
            }
        }
    }
}
